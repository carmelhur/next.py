def check_id_valid(id_number):
    digits = [int(d) for d in str(id_number).zfill(9)]
    multiplied = [(d if i % 2 == 0 else d * 2) for i, d in enumerate(digits)]
    adjusted = [n if n < 10 else n // 10 + n % 10 for n in multiplied]
    return sum(adjusted) % 10 == 0


class IDIterator:
    def __init__(self, id_):
        self.id_ = id_ + 1

    def __iter__(self):
        return self

    def __next__(self):
        while self.id_ <= 999999999:
            if check_id_valid(self.id_):
                valid_id = self.id_
                self.id_ += 1
                return str(valid_id).zfill(9)
            self.id_ += 1
        raise StopIteration


def id_generator(start_id):
    current = start_id + 1
    while current <= 999999999:
        if check_id_valid(current):
            yield str(current).zfill(9)
        current += 1


def main():
    start_id = int(input("Enter ID: "))
    mode = input("Generator or Iterator? (gen/it)? ").strip()

    if mode == "it":
        iterator = IDIterator(start_id)
        for _, valid_id in zip(range(10), iterator):
            print(valid_id)

    elif mode == "gen":
        generator = id_generator(start_id)
        for _, valid_id in zip(range(10), generator):
            print(valid_id)


if __name__ == "__main__":
    main()
